// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlin_version = '1.2.71'
    ext.plugin_version = '3.1.4'
    ext.playservices_version = '15.0.1'
    ext.firebase_version = '15.0.2'
    ext.support_libs_version = '27.1.1'

    def toggler = new Properties()
    def togglerPropperties = file("feature_toggle.properties")
    if (togglerPropperties.exists())
        toggler.load(new FileReader(togglerPropperties))
    ext.toggler = toggler

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlin_version"
        classpath 'com.google.gms:google-services:4.0.0'
        classpath 'io.fabric.tools:gradle:1.26.1'
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.2'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
}

subprojects { project ->
    afterEvaluate {
        if (project.plugins.hasPlugin("java")) {
            project.apply from: "${project.rootDir}/gradle/jacoco.gradle"
            project.apply from: "${project.rootDir}/gradle/checkstyle.gradle"
        }
        if (project.plugins.hasPlugin("kotlin") || project.plugins.hasPlugin("kotlin-android")) {
            project.apply from: "${project.rootDir}/gradle/ktlint.gradle"
        }
        project.tasks.withType(Test) {
            testLogging {
                afterSuite { desc, result ->
                    if (!desc.parent) { // will match the outermost suite
                        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                        def startItem = '|  ', endItem = '  |'
                        def repeatLength = startItem.length() + output.length() + endItem.length()
                        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                    }
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

apply from: rootProject.file("gradle/sites.gradle")