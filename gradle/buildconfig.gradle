class BuildConfigExtension {
    HashMap<String, String> configFields = new HashMap<>()
    String targetPackage = ""

    void field(String type, String key, def value) {
        configFields.put(key, "public static final $type ${key.toUpperCase()} = $value;")
    }

    void mfield(String key, def value) {
        configFields.put(key, "public static final ${value.getClass().simpleName} ${key.toUpperCase()} = $value;")
    }
}

class BuildConfigTask extends DefaultTask {

    String group = "buildConfig"
    String description = "Generate BuildConfig class."

    BuildConfigTask() {
        outputs.upToDateWhen { false }
        finalizedBy("assemble")
    }

    @TaskAction
    def execute(IncrementalTaskInputs inputs) {

        def buildDir = project.getBuildDir()
        buildDir = new File(buildDir, "build-config")
        if (!project.buildconfig.targetPackage.isEmpty())
            buildDir = new File(buildDir, project.buildconfig.targetPackage.replaceAll("\\.", File.separator))
        buildDir.mkdirs()

        def outFile = new File(buildDir, "BuildConfig.java")
        outFile.createNewFile()
        StringBuilder content = new StringBuilder()
        if (!project.buildconfig.targetPackage.isEmpty())
            content.append("package ${project.buildconfig.targetPackage};\n\n")
        content.append("public final class BuildConfig {\n")

        project.buildconfig.configFields.each { f ->
            content.append("  ${f.value}\n")
        }

        project.fileTree(dir: "src", include: "**${File.separatorChar}buildconfig.properties").forEach { file ->
            println "BuildConfig file -> ${file.getAbsolutePath()}"
            def properties = new Properties()
            if (file.exists())
                properties.load(file.newReader())

            properties.each { property ->
                content.append("  ${property.value}\n")
            }

        }
        content.append("}\n")
        outFile.write(content.toString())
    }
}

class BuildConfigPlugin implements Plugin<Project> {

    @SuppressWarnings("GroovyUnusedDeclaration")
    public static final String VERSION = "0.1"
    private BuildConfigExtension extension

    @Override
    void apply(Project project) {
        project.sourceSets {
            main.java.srcDir "${project.buildDir}/build-config"
        }
        def task = project.tasks.create("generateBuildConfigClasses", BuildConfigTask.class)
        def compileKotlin = project.tasks.getByName("compileKotlin")
        if (compileKotlin != null)
            compileKotlin.dependsOn.add(task)
        else
            project.tasks.getByName("compileJava").dependsOn.add(task)

        extension = project.extensions.create("buildconfig", BuildConfigExtension)
    }
}

plugins.apply(BuildConfigPlugin.class)